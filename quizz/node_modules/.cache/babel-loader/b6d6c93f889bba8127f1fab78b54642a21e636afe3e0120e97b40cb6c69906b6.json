{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\infos\\\\Documents\\\\quizz\\\\quizz\\\\src\\\\components\\\\CloudForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nconst CloudForm = () => {\n  _s();\n  const [response, setResponse] = useState(\"\");\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Define the request body and headers\n    const requestBody = JSON.stringify({\n      word: response\n    });\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    try {\n      const response = await fetch(\"http://localhost:3001/wordcloud\", {\n        method: \"POST\",\n        headers,\n        body: requestBody\n      });\n      if (response.ok) {\n        console.log(\"Word sent successfully!\");\n      } else {\n        console.error(\"Error sending the word. Status: \" + response.status);\n      }\n    } catch (error) {\n      console.error(\"Error sending the word:\", error);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"response\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, \"Enter a word: \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"response\",\n    required: true,\n    value: response,\n    onChange: e => setResponse(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button-red-corner\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, \"Send\"));\n};\n_s(CloudForm, \"61bbO0WwvkRxKwMNaVsNqesgfmc=\");\n_c = CloudForm;\nexport default CloudForm;\nvar _c;\n$RefreshReg$(_c, \"CloudForm\");","map":{"version":3,"names":["React","useState","CloudForm","_s","response","setResponse","handleSubmit","e","preventDefault","requestBody","JSON","stringify","word","headers","fetch","method","body","ok","console","log","error","status","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","required","value","onChange","target","className","onClick","_c","$RefreshReg$"],"sources":["C:/Users/infos/Documents/quizz/quizz/src/components/CloudForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst CloudForm = () => {\r\n  const [response, setResponse] = useState(\"\");\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Define the request body and headers\r\n    const requestBody = JSON.stringify({ word: response });\r\n    const headers = {\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:3001/wordcloud\", {\r\n        method: \"POST\",\r\n        headers,\r\n        body: requestBody,\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log(\"Word sent successfully!\");\r\n      } else {\r\n        console.error(\"Error sending the word. Status: \" + response.status);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error sending the word:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <label htmlFor=\"response\">Enter a word: </label>\r\n      <input type=\"text\" id=\"response\" required value={response} onChange={(e) => setResponse(e.target.value)} />\r\n      <button className=\"button-red-corner\" onClick={handleSubmit}>\r\n        Send\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CloudForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMK,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;;IAElB;IACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,SAAS,CAAC;MAAEC,IAAI,EAAER;IAAS,CAAC,CAAC;IACtD,MAAMS,OAAO,GAAG;MACd,cAAc,EAAE;IAClB,CAAC;IAED,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMU,KAAK,CAAC,iCAAiC,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdF,OAAO;QACPG,IAAI,EAAEP;MACR,CAAC,CAAC;MAEF,IAAIL,QAAQ,CAACa,EAAE,EAAE;QACfC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACxC,CAAC,MAAM;QACLD,OAAO,CAACE,KAAK,CAAC,kCAAkC,GAAGhB,QAAQ,CAACiB,MAAM,CAAC;MACrE;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,oBACEpB,KAAA,CAAAsB,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACE5B,KAAA,CAAAsB,aAAA;IAAOO,OAAO,EAAC,UAAU;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,gBAAqB,CAAC,eAChD5B,KAAA,CAAAsB,aAAA;IAAOQ,IAAI,EAAC,MAAM;IAACC,EAAE,EAAC,UAAU;IAACC,QAAQ;IAACC,KAAK,EAAE7B,QAAS;IAAC8B,QAAQ,EAAG3B,CAAC,IAAKF,WAAW,CAACE,CAAC,CAAC4B,MAAM,CAACF,KAAK,CAAE;IAAAV,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eAC3G5B,KAAA,CAAAsB,aAAA;IAAQc,SAAS,EAAC,mBAAmB;IAACC,OAAO,EAAE/B,YAAa;IAAAiB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,MAErD,CACL,CAAC;AAEV,CAAC;AAACzB,EAAA,CAtCID,SAAS;AAAAoC,EAAA,GAATpC,SAAS;AAwCf,eAAeA,SAAS;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}